# -*- coding: utf-8 -*-
"""primer_programa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LlCtypd9iK9bfXBXWqf3277T1u1I4lmT
"""

print("hola mundo")

"""**Clase 31 de mayo - funciones recursivas**"""

#Suponer que arrancamos con mínimo n=1
def calcular_factorial_rec(n):
  if n>1:
    return n * calcular_factorial_rec(n-1)
  else:
    return 1
print(calcular_factorial_rec(5))

#Factorial
def calcular_factorial(n):
  factorial=1
  for elemento in range(n,0,-1): #[5,4,3,2,1]
    factorial*=elemento
  return factorial

print(calcular_factorial(5))

def sumar_lista(lista, cantidad):
  if cantidad > 0:
    return lista[cantidad-1] + sumar_lista(lista,cantidad-1)
  else:
    return 0

lista_base=[2,4,8,2]
print(sumar_lista(lista_base, len(lista_base)))

#Sumar numeros en lista
#[1,2,3,4,5] = 15
def sumar_lista(lista):
  suma=0
  for numero in lista:
    suma+=numero
  return suma

print(sumar_lista([1,2,3,4,5]))

#Función recursiva sumar n numeros
n_i=int(input("digite el numero: ")) #5+4+3+2+1=15
def sumar(n):
  if n>0:
    return n + sumar(n-1)
  else:
    return 0

print(sumar(n_i))

"""**Clase 26 de mayo - funciones**"""

#sumar los n primero número naturales:
n=5 #0+1+2+3+4+5+6+7+8+9+10=55
def sumar_n_naturales(n_numeros):
  suma=0
  for numero in range(n_numeros+1):
    suma+=numero
  return suma
print(sumar_n_naturales(n))



#Recursión:
def imprimir_saludo():
  return "Hola!!! "

def saludar(nombre):
  #return imprimir_saludo()+nombre
  retorno_otra_fun=imprimir_saludo()
  return retorno_otra_fun + nombre

n1="Daniel"
print(saludar(n1))

#Importar modulo propio:
#import mi_primer_modulo as mp
import matematicas
from mi_primer_modulo import sumar
import mi_primer_modulo
#print("La suma de",6,"y",7,"es:",mp.sumar(6,7))
#print("La multiplicación de",6,"y",7,"es:",mp.mulplicar(6,7))
print(sumar(7,9))
print(matematicas.dividir(9,3))
print(dir(mi_primer_modulo))

k=5 #Variable global
def sumar(a,b):
  global k
  k=a+b #Nueva variable, local
  return k
print("k de arriba:",k)
print(sumar(7,6))
print("k de abajo:",k)

"""**Clase 25 de mayo - NUMPY matplotplib pandas y funciones**"""

def mulplicar_numeros(num, num2=10):
  return num*num2

print(mulplicar_numeros(5,3))

def saludar(nombre_parametro, p2):
  return 'hola '+nombre_parametro+" "+p2

nombre=input()
print(saludar(nombre,"cómo estás?"))

import matplotlib.pyplot as plt
nombres=["grupo_a", "grupo_b", "grupo_c"]
valores=[34.5, 50.3, 23]

plt.figure(figsize=(9,3))

plt.subplot(131)
plt.bar(nombres, valores)
plt.subplot(132)
plt.scatter(nombres, valores)
plt.subplot(133)
plt.plot(nombres, valores)
plt.suptitle("Diferentes graficad")
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0,2,50)
#print(x)
fig, ax=plt.subplots()
ax.plot(x,x, label="Lineal")
ax.plot(x,x**2, label="cuadratica")
ax.plot(x, x**3, label="cubica")
ax.set_xlabel("eje X")
ax.set_ylabel("eje Y")
ax.set_title("Gráfica matemática")
ax.legend()

#Matplotlib:
import matplotlib.pyplot as plt
plt.plot([1,2,3,4],[1,4,2,3])

#Numpy
import numpy as np

x =np.array([5,-4])
y =np.array([3,5])
print(x)
print(y)
suma=x+y
print("_____________")
print(suma)

"""**Clase 23 de mayo - excepciones y NUMPY**"""

#Identificar edades que sólo están en la primer lista:
#edad_lista_1=[20,18,28,30,50]
#edad_lista_2=[20,32,40,28,50]


def edades_diferentes(lista1, lista2):
  dif_lista=[]
  for elemento in lista1:
    if elemento not in lista2:
      dif_lista.append(elemento)
  return dif_lista

#print(edades_diferentes(edad_lista_1, edad_lista_2))

#Uso de numpy:
import numpy as np
a=np.array(list(range(1,5)))
#print(a)
print(a.shape)
#print(a[3])

b=np.array([[1,2,3],
            [4,5,6]])
print(b.shape)

def division(a,b):
  if a==0:
    raise ZeroDivisionError("Error denominador es cero")
  else:
    coci=a//b
    resi=a%b
    return [coci, resi]

try:
  print(division(10,0))
except Exception as e:
  print(type(e))

try:
  num=int(input("digite un numero: "))
  res=100/num
  print(res)
except Exception as exc:
  print("tipo de excepción es: ",type(exc))

def main():
  try:
    num=int(input("Digite el numerador: "))
    den=int(input("Digite el denominador: "))
    print(division(num, den))
  except ValueError:
    print("Error en el numero ingresado, NO ES UN NÚMERO")

main()

def division(a,b):
  try:
    coc=a//b
    res=a%b
    return (coc, res)
  except:
    #print("Error division por cero no es posible")
    #return "Error division por cero no es posible"
    print(imprimir_pantalla("Error"))


def imprimir_pantalla(str_mensaje):
  if str_mensaje == "Error":
    return "Error division por cero no es posible"
  else:
    return "Todo bien"

"""**Clase 19 de mayo - Archivos y JSON**"""

#Ejercicio ir al supermercado
productos={"huevos":600, "arroz":2000, "carne":15000, "aceite":30000,
           "cebolla":3000, "tomate":3500}
lista_compra=["arroz","carne","cebolla","pimienta"]
#Cuánto costó lo que compré
#Qué compré
costo=0
lista_adquirida=[]
for mi_articulo in lista_compra:
  if mi_articulo in productos:
    costo=costo+productos[mi_articulo]
    lista_adquirida.append(mi_articulo)

print(costo)
print(lista_adquirida)

#Convertir de string a json (diccionario)
import json
string_json='{"cascada": 65058, "escalada": 71609, "zoo": 95127, "caminata_aire_libre": 54215, "caminata_rio": 62265, "cabalgata": 59980, "desayuno": 74333}'
json_original=json.loads(string_json)
print(type(json_original))
print(json_original["escalada"])

#Guardar json
import json

data={
    "cientifico":{
        "nombre":"Alan Mathison",
        "edad":41
    }
}

with open("json/file_json.json", "w") as f:
  json.dump(data, f)

json_string=json.dumps(data)
print(data)
print(json_string)
print(type(data))
print(type(json_string))

#Ejemplo JSON:
mi_primer_json={"nombre":"Daniel",
 "apellido":"Salazar", 
 "edad":28, 
 "documento":10221111
}

#Cargar estructuras de datos desde archivos .pkl
import pickle
with open("files/documento.pkl", "rb") as p_file:
  objeto_1=pickle.load(p_file)
  lista_2=pickle.load(p_file)
  dicc=pickle.load(p_file)

print(type(objeto_1))
print(lista_2)
print(type(dicc))

#Cargar todos los archivos de una carpeta
#import os
#archivos=os.scandir('files/')

#for archivo in archivos:
#  print(archivo.name)

#Guardar estructuras de datos en archivos .pkl
import pickle
documentos=["12345","12456A","12345B"]
nombres=["Daniel", "Kevin", "Luisa"]
dicc=dict([(k,v) for k,v in zip(documentos,nombres)])

with open("files/documento.pkl", "wb") as p_file:
  pickle.dump(documentos, p_file)
  pickle.dump(nombres, p_file)
  pickle.dump(dicc, p_file)

"""**Clase 18 de mayo - Archivos**"""

#Leer archivo
#with open('files/data.txt', 'r') as f:
#  datax=f.read()
#  print(datax)

#Escribir en un archivo 'w' (reemplaza)
#with open('files/wdata.txt', 'w') as f:
#  data="@ 7x1=7, 77=49... gr36\n"
#  f.write(data)
#  f.write(data)
#  f.write(data)

#Escribir en un archivo 'a' (sin reemplazar)
#with open('files/wdata.txt', 'a') as f:
#  data = "Somos el mejor grupo de programación G36\n"
#  f.write(data)
#  f.write(data)
#  f.write(data)

#Leer con caracteres especiales: encoding
#with open('files/data1.txt', 'r', encoding="utf-8") as f:
#  print(f.read())

#Leer byte a byte
#with open('files/data1.txt', 'r') as f:
  #linea1=f.read(6)
  #linea2=f.read(10)

#print(linea1)
#print(linea2)

#Leer línea a línea
#with open('files/data1.txt', 'r') as f:
#  linea1=f.readline()
#  linea2=f.readline()
#print(linea1, end="")
#print(linea2, end="")

#Leer líneas como lista en python
#with open('files/data1.txt', 'r') as f:
#  print("nombre del archivo=",f.name)
#  lista=f.readlines()
#print(lista)

#Iterar linea a linea (eficiente)
#with open('files/data1.txt', 'r') as f:
#  for linea in f:
#    print(type(linea))
#    print(linea, end="")

#a+
#with open('files/data2.txt', 'a+') as f:
#  f.write("\nGrupo 36 ya acabó el reto 4")

#Guardar numero:
#valores=[1234,5678,9012,3.14159265,False]
#with open('files/data3.txt', 'w+') as f:
#  for valor in valores:
#    string_valor=str(valor)
#    f.write(string_valor)
#    f.write("\n")

#Pararnos en posición específica (seek)
#with open('files/data4.txt', 'r') as f:
#  f.seek(11,0)
#  for linea in f:
#    print(linea, end="")

with open('files/data4.txt', 'a+') as f:
  print(f.tell())

"""**Clase 17 de mayo - Diccionarios**"""

#Más metodos de diccionarios:
informacion_personal_dic={12345:"Daniel", 12346:"Jose", 12347:"Laura"}
informacion_personal_dic_2=informacion_personal_dic.copy()
informacion_personal_dic_2[12347]="Lina"
print(informacion_personal_dic)
print(informacion_personal_dic_2)

a="hola"
b=a
a="papá"
print(a)
print(b)

#Operaciones diccionario:
#{"escalada": 43512, "bungee_jumping": 79059, "dia_de_playa": 79334, "lago": 81467, "cabalgata": 83709}
import json

entrada=input()
entrada_dicc=json.loads(entrada)
print(entrada_dicc['bungee_jumping'])

#Metodos diccionarios:
informacion_personal_dic={12345:"Daniel", 12346:"Jose", 12347:"Laura"}
#print(len(informacion_personal_dic))
print(informacion_personal_dic.get(12348, "clave no encontrada"))
print(informacion_personal_dic[12347])

lista_claves=list(informacion_personal_dic.keys())
lista_valores=list(informacion_personal_dic.values())

print(lista_claves)
print(lista_valores)

informacion_personal_dic={12345:["Daniel","Ingeniero"], 12346:["Jose","Doctor"], 12347:["Laura","Abogado"]}
#informacion_personal_dic[12346][1]="Magister"
informacion_personal_dic[12346]=["Jose", "Magister"]
for clave in informacion_personal_dic:
  print(clave, informacion_personal_dic[clave])
print()
claves_lista=[]
valores_lista=[]
for clave, valor in informacion_personal_dic.items():
  print(clave, valor)
  claves_lista.append(clave)
  valores_lista.append(valor)

print(claves_lista)
print(valores_lista)
print()
print(informacion_personal_dic.values())
print(informacion_personal_dic.keys())
print(informacion_personal_dic.items())

"""**Clase 16 de mayo - Diccionarios**"""

#Ejemplo litas
lista_tel=[46441, 46442]
lista_nombres=["Daniel Salazar", "Jose Mora"]

def agregar(lista, dato):
  lista.append(dato)
  return lista

def eliminar(lista, dato):
  lista.remove(dato)
  return lista

def actualizar(lista, pos, dato):
  lista[pos]=dato
  return lista


nuevo_tel_1=46443
nuevo_nom_1="Lina"

x=agregar(lista_tel, nuevo_tel_1)
y=agregar(lista_nombres, nuevo_nom_1)
print("agrega =",lista_tel)
print("agrega =",lista_nombres)


eliminar(lista_tel, 46442)
eliminar(lista_nombres, "Jose Mora")
print("elimina =",lista_tel)
print("elimina =", lista_nombres)

actualizar(lista_tel, 1, 46452)
actualizar(lista_nombres, 1, "Lina Casas")
print("actualizar =",lista_tel)
print("actualizar =", lista_nombres)

#banco_dicc={"00340-123-451":[150000,"16-05-2022",30000], "0015-64564":[130000,"16-05-2022",50000]}
mi_primer_dicc={46441:"Daniel Salazar", 46442:"Jose Mora", 46443:"Lina"}
mi_primer_dicc[46442]="Laura Camila"
mi_primer_dicc[46444]="Jose Mora"
del mi_primer_dicc[46444]
print(mi_primer_dicc)
print(mi_primer_dicc[46442])

print("\nciclo for")
for clave in mi_primer_dicc:
  print(clave, mi_primer_dicc[clave])
  if 46443 in mi_primer_dicc:
    print("la contiene")

"""**Clase 1 de mayo - LISTAS y Arreglos**"""

#Matrices
arreglo=[1,2,3]
matriz=[[1,2,3],[4,5,6],[7,8,9], [10,11,12]]
print(matriz[1][1])
print(matriz[2][1])
print(matriz[0][2])

#Arreglos
''' def pos_maximo(A):
  m = 0
  for i in range(1,len(A)):
    if A[i]>A[m]:
      m =i
  return m
print(pos_maximo([1,-3, 4,11,6])) '''

arreglo=[1,-3, 4,11,6]
el_mayor=max(arreglo)
print(arreglo.index(el_mayor))

#Métodos de las listas
lista_letras=["D", "B", "C", "A"]
print("cantidad elementos",len(lista_letras)) #Retorna la cantidad de elementos
lista_letras[2]="CH" #Reemplazar un elemento de la lista
lista_letras.append("b") #Adicionar un nuevo elemento a la lista, por detrás
lista_letras.insert(2, "C") # Agragar un elemento en la posición específica
lista_letras.remove("CH") # Eliminar la primer ocurrencia del elemento solicitado
print("slice",lista_letras[0:3]) # Permite obtener una sublista sin modificar la lista original (Slice)
print("count",lista_letras.count("D")) # Contar cuántos elementos hay en una lista el elemento buscado
print("index",lista_letras.index("A")) # Retorna el índice del elemento buscado
print("max", max(lista_letras)) # Retorna el mayor elemento de la lista
print("min", min(lista_letras)) # Retorna el menor elemento de la lista
print(lista_letras)

print("ordenada menor a mayor",lista_letras.sort()) # Ordenar los elementos de menor a mayor
print("ordenada MAYOR a MENOR",lista_letras.sort(reverse=True)) # Ordenar los elementos de mayor a menor
string_1="HOLA"
lista_2=list(string_1) # Convertir a lista
print("El string hecho lista",lista_2)
#print("eliminación index",lista_letras.pop(0))
elemento_eliminado=lista_letras.pop(0) # Elimina el elemento en el indice especificado
print("Lista final",lista_letras)
print("elemento_eliminado", elemento_eliminado)

"""**Clase 11 de mayo - LISTAS**"""

lista_nombre=["Daniel", "Mar", "Laura", "Lina"]
lista_edades=[28, 25, 35, 26]
lista_nombre.insert(1,"Jhon")
lista_nombre.insert(3,"Jhon")
#print(lista_nombre)
#lista_nombre.remove("Jhon")

k=lista_nombre[:3]

print(lista_nombre)
#print(lista_nombre.count("Jhon"))
#print(max(lista_nombre))
lista_nombre.pop()
print(lista_nombre)

lista_frutas_y_verduras = ['Maracuyá','Pera','Mora','Yuca','Papa','Platano']
def dividir_lista(a_list):
    half = len(a_list)//2
    return a_list[:half], a_list[half:]
lista_de_fruta, lista_de_verdura = dividir_lista(lista_frutas_y_verduras)
print("Lista de Fruta: " ,lista_de_fruta)
print("Lista de Verdura: " ,lista_de_verdura)

def frutas_y_verduras(lista_de_alimentos, lista_que_define):
  frutas = []
  verduras = []
  
  for alimento in range(len(lista_de_alimentos)):
    if lista_que_define[alimento] == "f":
      frutas.append(lista_de_alimentos[alimento])
    else:
      verduras.append(lista_de_alimentos[alimento])
  
  return frutas, verduras

lista_frutas_verduras = ["Brocoli", "Pimenton", "Zanahoria", "Banano", "Manzana", "Mora"]
lista = ["v", "v", "v", "f", "f", "f"]
fruta, verdura = frutas_y_verduras(lista_frutas_verduras, lista)
print("Las frutas son:", fruta)
print("Las verduras son:", verdura)

"""**Clase 10 de mayo - tuplas Y LISTAS**"""

lista_numero=[5,7,14,6,9]
for pos in range(len(lista_numero)): #->[0,1,2,3,4]
  if(pos!=len(lista_numero)-1):
    print(lista_numero[pos], lista_numero[pos+1])

)#Trabajo con listas y números
lista_numero=[5,7,14,6,9]
lista_numero2=[9,11,10,4,8]
lista_nueva=[lista_numero, lista_numero2]
print(lista_nueva)

#tuplas con map()
s="D,a,n,i,e,l"
#s1=s.split(",")
#print(s1)
t=tuple(s)
#t =tuple(map(int, input().split(",")))
print(t)



#El mayor
tupla_numeros=(0,7,3,4,10,0,1)
''' def encontrar_mayor(numeros):
  el_mayor=0
  for elemento in numeros:
    if elemento > el_mayor:
      el_mayor=elemento
  return el_mayor
 '''
#print(encontrar_mayor(tupla_numeros))
print(max(tupla_numeros))

tupla_z=("hola", "mundo", "dev")
tupla_x=(1, 2, 3)
#print(tupla_z)
#print(tupla_z.index("mundo"))
print(tupla_x.index(2))

"""**Clase 09 de mayo - STRING y tuplas**"""

#Tuplas
tupla_0=("hola", 123)
tupla_1=(tupla_0,"hola mundo",123, "ad", 1.5)
#print(tupla_1[0][1],tupla_1[1][8])

tupla_a=("A","B",123)
tupla_b=(1,2,3,"4")
tupla_c=tupla_b+tupla_a
#print(tupla_c)
tupla_ax2=tupla_b*3
#print(tupla_ax2)

tupla_z=(tupla_a, tupla_b)
tupla_zx3=tupla_z*2
print(tupla_zx3)

string_1="a,b,c,d,e"
string_1=string_1.upper()
print(string_1[len(string_1)-1])
lista_1=string_1.split(",")
#print(lista_1)

lista_paises=["Colombia", "Panamá", "Perú"]
#print(lista_paises[1])

"""**Clase 05 de mayo - STRING**"""

#Ejercicio string cadena dentro de otra
cadena_1="pepito"
cadena_2="un pedazo de tierra por"

def contiene_cadena(primera_cadena, segunda_cadena):
  for caracter in primera_cadena:
    if caracter not in segunda_cadena:
      return False
    segunda_cadena=segunda_cadena.replace(caracter, "", 1)
  return True

print(contiene_cadena(cadena_1, cadena_2))

#Metodos string
text = "hola"
cantidad_elementos=len(text)
#print(text[2:len(text)])

text=text.upper()
text=text.lower()
text=text.capitalize()
text=text.swapcase()
print(text)

str_1="hOLA"
str_2="Hola"
#print(str_1>=str_2)
#print(str_1[3])

#Ejemplo cadena contiene otra cadena o caracter:
text = "cien años de soledad"
text_2="hola"
text_3="cxxx"
contadora=0
for caracter in text:
  if caracter in text_2:
    print("text_2 contiene un caracter ",caracter)
    contadora+=1
  if caracter in text_3:
    print("text_3 contiene un caracter ",caracter)
    contadora-=1

print("contadora ->",contadora)

"""**Clase 04 de mayo - Ciclos (FOR)**"""

n= int(input())
suma=0
for i in range (1,n+1):
    suma+=i
print(suma)

#Numeros impares 1 al 999
''' for numero in range(1, 1000, 2):
  print(numero) '''

#Numeros impares 1 al 999
numero_usuario=int(input("digite n: "))
for numero_par in range(0, numero_usuario + 1, 2):
  print(numero_par)

# de 1 al 100 con su respectivo cuadrado
for numero in range(1,101):
  print(numero,numero**2)

#Funcion range()
a=range(6) #[0,1,2,3,4,5]
#print(a)

b=range(6,11) #[6,7,8,9,10]
#print(b)

c=range(6,13,2) #[6,8,10.12]

for elemento in c:
  print(elemento, end=",")

#Imprimir lista de frutas>
lista_frutas=["lulo", "maracuya", "guanabana"]

for fruta in lista_frutas:
  print(fruta, end=" ")
  if(fruta=="lulo"):
    break

#Ejemplo for
lista_nombres=["Daniel", "Maria", "Lina"]
palabra="hola mundo"
palabra_2="mnu"
contador=0
contador_2=0

for elemento in palabra:
  for elemento_2 in palabra_2:
    if(elemento == elemento_2):
      print("letra está dentro de palabra", elemento)
  
    print("elemento for externo ", elemento)
    print("elemento_2 for interno ", elemento_2)
    print("dentro for interno \n")

print("for principal")

"""**Clase 03 de mayo - Ciclos**"""

#For en python
lista_nombres=["Daniel", "Maria", "Lina"]
palabra="hola mundo"

print(palabra[5])

''' print(lista_nombres[0])
print(lista_nombres[1])
print(lista_nombres[2]) '''

#Ejercicios cuadrado de numeros del 1 al 100:
numero=1
while(numero <= 100):
  #print(numero**2)
  numero=numero+1 #=> numero+=1

numero_impar = 1
numero_par = 2
while (numero_impar < 1000) or (numero_par < 1000):
  if (numero_impar%2 != 0) or (numero_par%2 == 0 <1000):
    print(numero_impar, numero_par)
  numero_par +=1
  numero_impar+=1

#Ejercicio numeros pares y numeros impares del 1 al 1000:
print("lista pares")
numero_par=2
while(numero_par <=1000):#Es par
  print(numero_par)
  numero_par+=2
  
print("lista impares")
numero_impar=1
while(numero_impar <=999):#Es par
  print(numero_impar)
  numero_impar+=2

''' numero = int(input("ingrese un  numero: "))
while(numero != 0):
  print(numero)
  numero = int(input("ingrese un  numero: ")) '''

''' numero=int(input("ingrese número entero "))
while(numero!=0):
  print(numero)
  numero=int(input("ingrese número entero ")) '''

numero_entero = int(input("Ingrese un valor entero "))
while(numero_entero != 0):
  print(numero_entero)
  numero_entero = int(input("Ingrese un valor entero "))
  if(numero_entero == 0):
    print("Finalizo")

#Trabajo en Casa
i=0
entrar=True
while ((i>=65 and i<=122) or entrar):
  entrar=False
  a=chr(i)
  print(a)
  i=int(input("ingrese su numero "))

num_entero = int(input("ingrese su numero"))
while(num_entero<65 or num_entero>90):
  num_entero = int(input("ingrese su numero de nuevo"))
print("Finalizo While")

#Ciclos while
''' print("algo previo")
i=1
while(i<=6):
  print(i)
  i+=1
print("i= ",i)
print("finalizó while") '''


#i, j
''' i=2
j=25
while(i<j):
  print(i, j, sep=", ")
  i*=2
  j+=10
print("finalizó")
print(i, j, sep=", ")
 '''


#numero más pequeño mayor que cero
def min_maquina():
  Xo = 1.0
  Xi = Xo / 2.0
  while Xi > 0.0:
    Xo = Xi
    Xi = Xo / 2.0
  return Xo

retorno_funcion=min_maquina()
print(retorno_funcion)

"""Clase 02 de mayo de 2022 **Condicionales anidados**"""

color=input("Escriba el color: ")
if(color=="verde"):
  print("el color es verde")
elif(color=="amarillo"):
  print("el color es amarillo")
elif(color=="gris"):
  print("es color es gris")
elif(color=="rojo"):
  print("es color es rojo")
elif(color=="azul"):
  print("es color es azul")
else:
  print("color diferente al esperado")
print("finalizó")

"""Clase 28 de abril de 2022 **Funciones 2 parámetros y condicionales**

"""

#Ejercicio similar RETO 1
#entrada edad de una persona
#imprimir= edad edad**2 edad*4
##edad*4 >50 => "viejo"
##edad*4 >40 pero menor que 50 => "adulto"
##edad*4 > 0 pero menor que 40 => "joven"

edad = int(input())
edad_cuadrada=edad ** 2
edad_4 = edad*4
categoria=""

if(edad_4 >= 0 and edad_4 < 40 ):
  categoria="joven"
elif(edad_4 >= 40 and edad_4 < 50):
  categoria="adulto"
else:
  categoria="viejo"

print(str(edad)+" "+str(edad_cuadrada)+ " "+str(edad_4))
print(categoria)

#Condicionales:
a=5
b=6
c=8
d=7
def calcular_numero_mayor(a,b):
  if(a!=b or c>=d and b==d):
    print("verdadero")
  else:
    print("falso")


if(a>10):
  print("la variable es: ",a)
if(b>5):

#Area rectángulo

base=int(input())
altura=int(input())

def calcular_area_rectangulo(base_parametro, altura_parametro):
  area=base_parametro*altura_parametro
  return area
print("el resultado es: ", calcular_area_rectangulo(base, altura))

#Mostrar nombre y edad:

nombre_arg=input()
edad_arg=int(input())

def mostrar_datos(nombre, edad):
  respuesta=nombre+" "+str(edad)
  return respuesta

print(mostrar_datos(nombre_arg, edad_arg))

def sumados_numeros(numero_1, numero_2):
  suma = numero_1 + numero_2
  cuadrado = suma ** 2
  return cuadrado

print("Por favor digite primer número")
numero_1_usuario=int(input())
print("Por favor digite segundo número")
numero_2_usuario=int(input())

print("El retorno de los cuadrados sumados es: " + str(sumados_numeros(numero_1_usuario, numero_2_usuario)))


def elevar_cuadrado(suma):
  resultado = suma ** 2
  return resultado

numero_1_usuario=int(input())
numero_2_usuario=int(input())
suma_op=numero_1_usuario+numero_2_usuario
print(elevar_cuadrado(suma_op))

"""Clase 27 de abril de 2022 **Funciones**"""

def sumarle_1(numero):
  numero_resultado=numero+1
  return numero_resultado

def calcular_cuadrado(x):
  cuadrado=x**2
  return cuadrado

def saludar(nombre):
  saludo = "Hola "+nombre
  return saludo

#resultado_funcion=sumarle_1(5)
print(sumarle_1(5))
variable_entrada=6
nombre_persona="Daniel"
print(calcular_cuadrado(variable_entrada))
print(saludar(nombre_persona))


#Area circulo
import math
def area_circulo(r):
  area = math.pi * r ** 2
  return area
print(area_circulo(2))


a=5
a=5/2
print(a)

"""Clase 26 de abril de 2022 **Tipos de datos parte 2**"""

m1=10
m2=5
r=7
G=6.67384E-11
F = G*((m1*m2)/(r**2))
#print(F)


#Operadores lógicos
x=True
y=not x
print(x)
x=not y
x=y
print(x)
#Exp. log AND
a=False
b=False
if(a and b):
  sdkjksdj


#Exp. log OR
a=False
b=False
if(a or b):
  sdkjksdj


#Igualdad
a=True
A=False
i=5
j=5
k="Hola"
l="hola"
if(k == l):
  sdkjksdj


#diferente
a=True
A=False
i=5
j=5
k="Hola"
l="hola"
if(k != l):
  sdkjksdj

#Prioridad operadores
a= -(42) // 6 + 7 * 3 - 39
#7 + 21 - 39
#28-39
#-11
print(a)

"""Clase 25 de abril de 2022
**Tipos de datos**
"""

#Variables enteras:
i=0
variable_principal=10
j=-8
print(i)

#Variables reales:
k=1.8
gravedad=9.8
l=-0.21457
print(gravedad)

#Variables booleanas
es_mayor=True
es_igual=False
a=True
print(es_mayor)

#Variables caracteres:
caracter1="a"
caracter2='a'
caracter_3="%"
print(caracter_3)

#Variables string (texto):
string_1="hola mundo"
string_2="mi primer string"
str_3="soy un string pequeño pero ....."
print(str_3)

"""Clase 25 de abril de 2022
**Op. asignación**
"""

KAPPA: float = 9E+9
def ley_coulomb(Q1, Q2, r):
  modulo = KAPPA * Q1 * Q2 / r ** 2
  return modulo
carga1 = float(input("Carga 1: "))
carga2 = float(input("Carga 2: "))
distancia = float(input("Distancia entre cargas: "))
print("El modulo de la fuerza es:", end = " ")
print(ley_coulomb(carga1, carga2, distancia))









from IPython.display import YouTubeVideo

YouTubeVideo("6iOlB0QLy84")

import random # se importa la librería de python random


j:int=10
sujetos = ["bebé", " princess","mami"] #se define una lista
intenciones =["yo quiero","yo puedo","yo vengo a","voy a"]
verbos = ["encendelte","amalte","ligal","jugal"]
advs =["suave","lento","lápido","fuelte"]
complementos_uno = ["hasta que salga el sol","toda la noche", 
                     "hasta el amanecer","todo el día"]
complementos_dos = ["sin anestesia","sin compromiso",
                     "feis to feis", "sin miedo"]


sujeto_seleccionado = random.choice(sujetos) 
#se utiliza la librería para seleccionar un elemento al azar de la lista sujetos
intencion_seleccionada = random.choice(intenciones) 
verbo_seleccionado = random.choice(verbos)
adv_seleccionado=random.choice(advs)
compl1s_seleccionado = random.choice(complementos_uno)
compl2s_seleccionado = random.choice(complementos_dos)

print(j)

print("letra generada: "+ sujeto_seleccionado + " "
+ intencion_seleccionada + " " + verbo_seleccionado + " "
+ adv_seleccionado + " "+ compl1s_seleccionado + " "
+ compl2s_seleccionado) # se imprime la canción

#Hola grupo 36

print("Variable 1:")
variable_1 = int(input())

print("Variable 2:")
variable_2 = int(input())

variable_3 = variable_1 + variable_2

print("El resultado de la suma es: ")
print(variable_3)